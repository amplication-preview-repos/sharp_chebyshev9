/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PropertiesService } from "../properties.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PropertiesCreateInput } from "./PropertiesCreateInput";
import { Properties } from "./Properties";
import { PropertiesFindManyArgs } from "./PropertiesFindManyArgs";
import { PropertiesWhereUniqueInput } from "./PropertiesWhereUniqueInput";
import { PropertiesUpdateInput } from "./PropertiesUpdateInput";
import { TransactionsFindManyArgs } from "../../transactions/base/TransactionsFindManyArgs";
import { Transactions } from "../../transactions/base/Transactions";
import { TransactionsWhereUniqueInput } from "../../transactions/base/TransactionsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PropertiesControllerBase {
  constructor(
    protected readonly service: PropertiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Properties })
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProperties(
    @common.Body() data: PropertiesCreateInput
  ): Promise<Properties> {
    return await this.service.createProperties({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        image: true,
        imageGallery: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        price: true,
        size: true,
        typeField: true,
        updatedAt: true,
        video: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Properties] })
  @ApiNestedQuery(PropertiesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async propertiesItems(@common.Req() request: Request): Promise<Properties[]> {
    const args = plainToClass(PropertiesFindManyArgs, request.query);
    return this.service.propertiesItems({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        image: true,
        imageGallery: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        price: true,
        size: true,
        typeField: true,
        updatedAt: true,
        video: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Properties })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async properties(
    @common.Param() params: PropertiesWhereUniqueInput
  ): Promise<Properties | null> {
    const result = await this.service.properties({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        image: true,
        imageGallery: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        price: true,
        size: true,
        typeField: true,
        updatedAt: true,
        video: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Properties })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProperties(
    @common.Param() params: PropertiesWhereUniqueInput,
    @common.Body() data: PropertiesUpdateInput
  ): Promise<Properties | null> {
    try {
      return await this.service.updateProperties({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          image: true,
          imageGallery: true,
          numberOfBathrooms: true,
          numberOfBedrooms: true,
          price: true,
          size: true,
          typeField: true,
          updatedAt: true,
          video: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Properties })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProperties(
    @common.Param() params: PropertiesWhereUniqueInput
  ): Promise<Properties | null> {
    try {
      return await this.service.deleteProperties({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          image: true,
          imageGallery: true,
          numberOfBathrooms: true,
          numberOfBedrooms: true,
          price: true,
          size: true,
          typeField: true,
          updatedAt: true,
          video: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactionsItems")
  @ApiNestedQuery(TransactionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "read",
    possession: "any",
  })
  async findTransactionsItems(
    @common.Req() request: Request,
    @common.Param() params: PropertiesWhereUniqueInput
  ): Promise<Transactions[]> {
    const query = plainToClass(TransactionsFindManyArgs, request.query);
    const results = await this.service.findTransactionsItems(params.id, {
      ...query,
      select: {
        amount: true,
        buyer: true,
        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        seller: true,
        transactionDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "update",
    possession: "any",
  })
  async connectTransactionsItems(
    @common.Param() params: PropertiesWhereUniqueInput,
    @common.Body() body: TransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsItems: {
        connect: body,
      },
    };
    await this.service.updateProperties({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "update",
    possession: "any",
  })
  async updateTransactionsItems(
    @common.Param() params: PropertiesWhereUniqueInput,
    @common.Body() body: TransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsItems: {
        set: body,
      },
    };
    await this.service.updateProperties({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactionsItems")
  @nestAccessControl.UseRoles({
    resource: "Properties",
    action: "update",
    possession: "any",
  })
  async disconnectTransactionsItems(
    @common.Param() params: PropertiesWhereUniqueInput,
    @common.Body() body: TransactionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateProperties({
      where: params,
      data,
      select: { id: true },
    });
  }
}
