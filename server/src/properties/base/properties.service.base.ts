/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Properties as PrismaProperties,
  Transactions as PrismaTransactions,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class PropertiesServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.PropertiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.properties.count(args);
  }

  async propertiesItems(
    args: Prisma.PropertiesFindManyArgs
  ): Promise<PrismaProperties[]> {
    return this.prisma.properties.findMany(args);
  }
  async properties(
    args: Prisma.PropertiesFindUniqueArgs
  ): Promise<PrismaProperties | null> {
    return this.prisma.properties.findUnique(args);
  }
  async createProperties(
    args: Prisma.PropertiesCreateArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.create(args);
  }
  async updateProperties(
    args: Prisma.PropertiesUpdateArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.update(args);
  }
  async deleteProperties(
    args: Prisma.PropertiesDeleteArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.delete(args);
  }

  async uploadImage<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProperties> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.properties.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.properties.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>
  ): Promise<PrismaProperties> {
    const { image } = await this.prisma.properties.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.properties.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async uploadVideo<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProperties> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "video";
    const video = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.properties.update({
      where: args.where,

      data: {
        video: video as InputJsonValue,
      },
    });
  }

  async downloadVideo<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>
  ): Promise<FileDownload> {
    const { video } = await this.prisma.properties.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      video as unknown as LocalStorageFile
    );
  }

  async deleteVideo<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>
  ): Promise<PrismaProperties> {
    const { video } = await this.prisma.properties.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      video as unknown as LocalStorageFile
    );

    return await this.prisma.properties.update({
      where: args.where,

      data: {
        video: Prisma.DbNull,
      },
    });
  }

  async findTransactionsItems(
    parentId: string,
    args: Prisma.TransactionsFindManyArgs
  ): Promise<PrismaTransactions[]> {
    return this.prisma.properties
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactionsItems(args);
  }
}
